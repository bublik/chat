#require 'spec_helper'
#
## This spec was generated by rspec-rails when you ran the scaffold generator.
## It demonstrates how one might use RSpec to specify the controller code that
## was generated by Rails when you ran the scaffold generator.
##
## It assumes that the implementation code is generated by the rails scaffold
## generator.  If you are using any extension libraries to generate different
## controller code, this generated spec may or may not pass.
##
## It only uses APIs available in rails and/or rspec-rails.  There are a number
## of tools you can use to make these specs even more expressive, but we're
## sticking to rails and rspec-rails APIs to keep things simple and stable.
##
## Compared to earlier versions of this generator, there is very limited use of
## stubs and message expectations in this spec.  Stubs are only used when there
## is no simpler way to get a handle on the object needed for the example.
## Message expectations are only used when there is no simpler way to specify
## that an instance is receiving a specific message.
#
#describe ArchiveCollectionsController do
#
#  # This should return the minimal set of attributes required to create a valid
#  # ArchiveCollection. As you add validations to ArchiveCollection, be sure to
#  # adjust the attributes here as well.
#  let(:valid_attributes) { { "us" => "MyString" } }
#
#  # This should return the minimal set of values that should be in the session
#  # in order to pass any filters (e.g. authentication) defined in
#  # ArchiveCollectionsController. Be sure to keep this updated too.
#  let(:valid_session) { {} }
#
#  describe "GET index" do
#    it "assigns all archive_collections as @archive_collections" do
#      archive_collection = ArchiveCollection.create! valid_attributes
#      get :index, {}, valid_session
#      assigns(:archive_collections).should eq([archive_collection])
#    end
#  end
#
#  describe "GET show" do
#    it "assigns the requested archive_collection as @archive_collection" do
#      archive_collection = ArchiveCollection.create! valid_attributes
#      get :show, {:id => archive_collection.to_param}, valid_session
#      assigns(:archive_collection).should eq(archive_collection)
#    end
#  end
#
#  describe "GET new" do
#    it "assigns a new archive_collection as @archive_collection" do
#      get :new, {}, valid_session
#      assigns(:archive_collection).should be_a_new(ArchiveCollection)
#    end
#  end
#
#  describe "GET edit" do
#    it "assigns the requested archive_collection as @archive_collection" do
#      archive_collection = ArchiveCollection.create! valid_attributes
#      get :edit, {:id => archive_collection.to_param}, valid_session
#      assigns(:archive_collection).should eq(archive_collection)
#    end
#  end
#
#  describe "POST create" do
#    describe "with valid params" do
#      it "creates a new ArchiveCollection" do
#        expect {
#          post :create, {:archive_collection => valid_attributes}, valid_session
#        }.to change(ArchiveCollection, :count).by(1)
#      end
#
#      it "assigns a newly created archive_collection as @archive_collection" do
#        post :create, {:archive_collection => valid_attributes}, valid_session
#        assigns(:archive_collection).should be_a(ArchiveCollection)
#        assigns(:archive_collection).should be_persisted
#      end
#
#      it "redirects to the created archive_collection" do
#        post :create, {:archive_collection => valid_attributes}, valid_session
#        response.should redirect_to(ArchiveCollection.last)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns a newly created but unsaved archive_collection as @archive_collection" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        ArchiveCollection.any_instance.stub(:save).and_return(false)
#        post :create, {:archive_collection => { "us" => "invalid value" }}, valid_session
#        assigns(:archive_collection).should be_a_new(ArchiveCollection)
#      end
#
#      it "re-renders the 'new' template" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        ArchiveCollection.any_instance.stub(:save).and_return(false)
#        post :create, {:archive_collection => { "us" => "invalid value" }}, valid_session
#        response.should render_template("new")
#      end
#    end
#  end
#
#  describe "PUT update" do
#    describe "with valid params" do
#      it "updates the requested archive_collection" do
#        archive_collection = ArchiveCollection.create! valid_attributes
#        # Assuming there are no other archive_collections in the database, this
#        # specifies that the ArchiveCollection created on the previous line
#        # receives the :update_attributes message with whatever params are
#        # submitted in the request.
#        ArchiveCollection.any_instance.should_receive(:update).with({ "us" => "MyString" })
#        put :update, {:id => archive_collection.to_param, :archive_collection => { "us" => "MyString" }}, valid_session
#      end
#
#      it "assigns the requested archive_collection as @archive_collection" do
#        archive_collection = ArchiveCollection.create! valid_attributes
#        put :update, {:id => archive_collection.to_param, :archive_collection => valid_attributes}, valid_session
#        assigns(:archive_collection).should eq(archive_collection)
#      end
#
#      it "redirects to the archive_collection" do
#        archive_collection = ArchiveCollection.create! valid_attributes
#        put :update, {:id => archive_collection.to_param, :archive_collection => valid_attributes}, valid_session
#        response.should redirect_to(archive_collection)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns the archive_collection as @archive_collection" do
#        archive_collection = ArchiveCollection.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        ArchiveCollection.any_instance.stub(:save).and_return(false)
#        put :update, {:id => archive_collection.to_param, :archive_collection => { "us" => "invalid value" }}, valid_session
#        assigns(:archive_collection).should eq(archive_collection)
#      end
#
#      it "re-renders the 'edit' template" do
#        archive_collection = ArchiveCollection.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        ArchiveCollection.any_instance.stub(:save).and_return(false)
#        put :update, {:id => archive_collection.to_param, :archive_collection => { "us" => "invalid value" }}, valid_session
#        response.should render_template("edit")
#      end
#    end
#  end
#
#  describe "DELETE destroy" do
#    it "destroys the requested archive_collection" do
#      archive_collection = ArchiveCollection.create! valid_attributes
#      expect {
#        delete :destroy, {:id => archive_collection.to_param}, valid_session
#      }.to change(ArchiveCollection, :count).by(-1)
#    end
#
#    it "redirects to the archive_collections list" do
#      archive_collection = ArchiveCollection.create! valid_attributes
#      delete :destroy, {:id => archive_collection.to_param}, valid_session
#      response.should redirect_to(archive_collections_url)
#    end
#  end
#
#end
