class ChatFrame
  constructor: (@options) ->
    #console.log('Constructor Start with options ->', @options)
    @site_uid = @options['widget_id']
    @button_id = '#btn-' + @site_uid
    @widget_window_id = '#widg-' + @site_uid
    @assets_host = '<%= APP_CONFIG["HOST"] %>'
    @chat_config_host = '<%= APP_CONFIG['HOST'] %>'
    @reconnect = true
    @prefix = @options['user_prefix'] || document.domain.substr(0, 9)
    @user_uid = Math.floor(Math.random(1, 100) * 5000000000)
    @sheme = 'http'
    @sheme = 'https' if (document.location.protocol is 'https:')
    @referrer = if _.isEmpty(document.referrer) then '-' else document.referrer
    @widget_css_url = @sheme + '://' + @assets_host + '/assets/widget.css'
    @feedback_path = @sheme + '://' + @chat_config_host + '/sites/' + @site_uid + '/site_feedbacks.json'
    @site_config = {id: @site_uid, app_host: @sheme + '://' + @chat_config_host, asset_host: @sheme + '://' + @assets_host}
    @lang = (navigator.language || navigator.userLanguage || navigator.systemLanguage || "en").substr(0,2).toLowerCase()
    @site_config_url = @sheme + '://' + @chat_config_host + '/site_config/' + @lang + '/' + @site_uid + '.json'
    #console.log('Constructor Finish \<-')
    @checkCookie()

  load_site_config: ->
    #console.log 'load_site_config ->'
    self = @
    jQuery.getJSON @site_config_url, (data) ->
      _.extend(self.site_config, data)
      self.site_config.btn_title = self.site_config['btn_title_' + self.site_config.agent.status].replace(/(\S+)/g, '<span>$1</span>')

      #console.log 'Config LOADED!!! ->', self.site_config
      self.load_css()
      self.init_button()

  init_button: ->
    #console.log 'init button ->', @button_id
    unless @site_config['enabled']
      #console.log 'widget DISABLED!'
      return
    jQuery('body').append(_.template(window.ch_button, { btn: @site_config }))
    self = @
    jQuery(@button_id).on 'click', (e) ->
      self.show_widget()
    @check_autoopen()

  check_autoopen: ->
    return false unless @site_config['auto_open']

    time_left = ((new Date).getTime() - @first_visit_at) || 0
    time_wait = (@site_config['auto_open_timeout'] * 1000) - time_left
    self = @
    if @already_chated != 'true' #  если он не чатился сегодня
      time_wait = 1 if time_wait < 0 # если время чата прошло тогда ставим секундную задержку на показ
      setTimeout (->
        self.connect()
        self.show_widget()
        self.auto_open_message()
      ), time_wait

  load_css: ->
    css = document.createElement("link")
    css.media = "all"
    css.rel = 'stylesheet'
    css.href = @widget_css_url
    document.body.appendChild(css)

  position: (_el) ->
    #console.log 'position ->', _el.attr('id')
    _el.css(@site_config['side'], 0)
    if @site_config['position'] is 'center'
      _el.css('left', (jQuery(window).width() / 2) - (jQuery(_el).width() / 2))
      _el.css('top', (jQuery(window).height() / 2) - (jQuery(_el).height() / 2))
    else
      _el.css(@site_config['position'], 0)

  bind_widget_events: ->
    self = @
    #console.log 'bind events ->'
    jQuery('.chf_ico_close, .shf_button_gray_complete').on 'click', (e) ->
      self.close_widget()
    jQuery('.chf_ico_hide').on 'click', (e) ->
      self.hide_widget()
      if jQuery.xmpp.connected
        jQuery.xmpp.setPresence('away')
    jQuery('.shf_textarea_answer textarea').on 'focus', (e) ->
      if jQuery.xmpp.connected
        jQuery.xmpp.setPresence(null)
      else
        self.connect()
    jQuery('.shf_enter_ico').on 'click', (e) ->
      return false unless jQuery.xmpp.connected # we should not send message while client is not connected
      self.send_message()
    jQuery('.shf_textarea_answer textarea').on 'keyup', (e) ->
      e.stopPropagation()
      if e.keyCode is 13
        jQuery('.shf_textarea_answer .shf_enter_ico').click()
  show_widget: ->
    @reconnect = true
    @setCookie('already_chated', true, 1)
    @already_chated = 'true'
    setTimeout (->
      window.ChatFrame.connect()
    ), 3000
    #console.log 'show_widget ->', jQuery(@widget_window_id)
    unless jQuery(@widget_window_id)[0]
      #console.log 'Add widget to page'
      jQuery('body').append(_.template(window.ch_widget_tpl, { config: @site_config }))
      @bind_widget_events()
    @agent_status()
    @position(jQuery(@widget_window_id))
    jQuery(@widget_window_id).fadeIn()
    @scroll_messages() # show new messages when widget window minimized and Operator was sent messages

  close_widget: ->
    @reconnect = false
    jQuery(@widget_window_id).hide()
    jQuery.xmpp.disconnectSync()

  hide_widget: ->
    jQuery(@widget_window_id).fadeOut()
  _conecting: ->
    jQuery('#facebookG').show()
    @replay_field().attr('disabled','disabled')
  _connected: ->
    jQuery('#facebookG').hide()
    @replay_field().removeAttr('disabled')
  connect: ->
    #return if @site_config.agent.status is 'offline'
    #console.log "Connect:"
    if jQuery.xmpp.connected || @reconnect is false
      #console.log '... already connected!'
      @_connected()
      return
    jQuery.xmpp.connect @_onConnect(@)
  _onConnect: (context)->
    url: context.site_config.bosh_url
    jid: context.prefix + '_' + context.user_uid + '@' + context.site_config.bosh_domain
    password: ''
    wait: 300  #5 min
    inactivity: 305
    onConnect: ->
      #console.log "onConnect ->"
      jQuery.xmpp.setPresence(null)
    #console.log 'jQuery.xmpp.sid', jQuery.xmpp.sid
    onIq: (iq) ->
      #console.log('onIq', iq)
    onNotification: (notification) ->
      #console.log("onNotification ->", notification)
    onPresence: (presence) ->
      #console.log('onPresence ->', presence, presence.from)
      context._connected()
      curId = presence.from.split('@')[0]
      status_icon = "available_icon"
      switch presence.show
        when "dnd"
          status_icon = "busy_icon"
        when "away"
          status_icon = "away_icon"
        else
          status_icon = "available_icon"
    #console.log('onpresence', curId, status_icon)

    onDisconnect: ->
      jQuery.xmpp.connected = false
      context._conecting()
      #console.log "Disconnected and start Connect->"
      setTimeout (->
        window.ChatFrame.connect() unless jQuery.xmpp.connected
      ), 3000

    onMessage: (message) ->
      #console.log('onMessage', message)
      -#if (err = message.data.find('error')).context != undefined
      #console.log 'ERROR', message.from, err
      #console.log 'context.site_config.agent.name', context.site_config.agent.name
      msg = {
        time_at: (new Date).toLocaleString().split(' ')[1],
        full_name: context.site_config.agent.name,
        content: message.body}
      context.append_message(msg)

    onError: (error) ->
      #console.log error.error
      if error.error.match(/Invalid/)
        #console.log 'jQuery.xmpp.sid', jQuery.xmpp.sid
        #console.log 'CALL DISCONNECT'
        jQuery.xmpp.disconnect()
  # show offline feedback form
  offline_feedback: ()->
    jQuery('.shf_textarea_answer, #shf_messages').fadeOut()
    mesage_content = _.template(window.ch_fedback_form, { data: @site_config })
    jQuery('.shf_messages').html(mesage_content)
    jQuery('.shf_messages').css('height', 'auto')
    self = @
    jQuery('#btn_offline_feedback').on 'click', (e) ->
      return false if jQuery('#ch_message').val() == ''
      jQuery(e.target).attr('disabled', 'disabled')#prevent double send
      data = jQuery('form[name=ch_offline_feedback]').serialize()
      jQuery.ajax self.feedback_path,
        type: 'POST'
        dataType: 'json'
        data: data
        success: (data, textStatus, jqXHR) ->
          jQuery('#ch_feedback_box').html(data.message)
          jQuery.xmpp.sendMessage({ type: 'chat', to: self.site_config.agent.email, body: self.site_config.locale.new_feedback })
      return false


  auto_open_message: ->
    @append_message({time_at: (new Date).toLocaleString().split(' ')[1], full_name: @site_config.agent.name, content: @site_config.sales_welcome_message })
  append_message: (data) ->
    #console.log('append_message <-', data)
    jQuery('#chat_new_message')[0].play()
    if _.isEmpty(data.content)
      #console.log('empty message, exit')
      return
    mesage_content = _.template(window.ch_message_tpl, { msg: data })
    jQuery('#shf_messages').append(mesage_content)
    @scroll_messages()

  scroll_messages: ()->
    jQuery('#shf_messages').last().scrollTop(100000).fadeIn('slow')
  current_page: ->
    # Send information when first message
    if @is_no_send_messages()
      prefix = ["Page: " + document.location]
      prefix.push("Referrer: " + @referrer) unless @referrer is '-'
      prefix.join("\n") + "\n"
    else ''

  is_no_send_messages: ->
    return jQuery('#shf_messages div').length is 0
  agent_status: () ->
    jQuery.getScript('http://helperchat.com/presence/jid/' + @site_config.agent.email.split('@')[0] + '/helperchat.com/js?cb=window.ChatFrame.update_agent_status')
  update_agent_status: ()->
    data = {
      name: @site_config.agent.name,
      avatar_path: @sheme + '://' + @assets_host + @site_config.agent.avatar_path,
      status_text: @site_config.locale[jabber_resources[0].show],
      status_class: jabber_resources[0].show,
      status_image: jabber_resources[0].image
    }
    #console.log('SET AGENT STATUS', data)
    mesage_content = _.template(window.ch_agent_tpl, { data: data })
    jQuery('.shf_agent').replaceWith(mesage_content)
    title = (if jabber_resources[0].show is 'unavailable' then @site_config.title_offline else @site_config.title_online)
    jQuery('.shf_title').text(title)
    #console.log jabber_resources[0].show
    if (jabber_resources[0].show is 'unavailable') and @is_no_send_messages()
      @offline_feedback()
  #@reconnect = false
  replay_field: ->
    jQuery('.shf_textarea_answer textarea')
  send_message: ->
    unless jQuery.xmpp.connected
      @connect()

    message = @replay_field().val().slice(0, -1)
    if message == ''
      input.val ""
      return
    #console.log 'Send message =>'
    # jQuery.xmpp.sendCommand("<presence from='"+ $.xmpp.jid+"' to='"+@site_config.to+"' type='subscribe'/>")
    # type chat, private, groupchat and default  chat
    jQuery.xmpp.sendMessage({ type: 'chat', to: @site_config.agent.email, body: @current_page() + message })

    @append_message({
      time_at: (new Date).toLocaleString().split(' ')[1],
      full_name: 'You',
      content: @replay_field().val() })
    @replay_field().val ""
    @agent_status() # update agent status on send message, to check if agent went to offline

  checkCookie: () ->
    @user_uid = (@getCookie('ch_usid') or @setCookie('ch_usid', @user_uid, 365))
    @referrer = (@getCookie('ch_ref') or @setCookie('ch_ref', @referrer, 365))
    @pages_show = @setCookie('pages_show', parseInt(@getCookie('pages_show') || 0) + 1, 365)
    @already_chated = @getCookie('already_chated')
    # time in miliseconds when user visited site today
    @first_visit_at = parseInt(@getCookie('visit_at') or @setCookie('visit_at', (new Date).getTime(), 1))
    _.extend(@site_config, {user_uid: @user_uid})

  setCookie: (c_name, value, exdays) ->
    exdate = new Date()
    exdate.setDate exdate.getDate() + exdays
    c_value = escape(value) + ((if (not (exdays?)) then "" else "; expires=" + exdate.toUTCString()))
    document.cookie = c_name + "=" + c_value

  getCookie: (c_name) ->
    c_value = document.cookie
    c_start = c_value.indexOf(" " + c_name + "=")
    c_start = c_value.indexOf(c_name + "=")  if c_start is -1
    if c_start is -1
      c_value = null
    else
      c_start = c_value.indexOf("=", c_start) + 1
      c_end = c_value.indexOf(";", c_start)
      c_end = c_value.length  if c_end is -1
      c_value = unescape(c_value.substring(c_start, c_end))
    c_value

#  delCookie: (name) ->
#    expire = new Date();
#    expire.setDate(expire.getDate() - 365)
#    document.cookie = name + "= ; expires=" + expire.toGMTString()

window.ChatFrame = new ChatFrame(window._chcfg)
window.ChatFrame.load_site_config()
